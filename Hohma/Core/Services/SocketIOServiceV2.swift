//
//  SocketIOServiceV2.swift
//  Hohma
//
//  Created by Artem Vydro on 06.08.2025.
//

import Combine
import Foundation
import SocketIO

// MARK: - Socket.IO Service V2 (using official Socket.IO-Client-Swift)
class SocketIOServiceV2: ObservableObject, SocketIOServiceProtocol {
    // MARK: - Properties
    private let baseURL: String
    private let _clientId = UUID().uuidString

    private var manager: SocketManager?
    private var socket: SocketIOClient?
    private var authToken: String?

    // MARK: - Published Properties
    @Published var isConnected = false
    @Published var isConnecting = false
    @Published var error: String?

    // MARK: - Public Properties
    var clientId: String {
        return _clientId
    }

    // MARK: - Initialization
    init(baseURL: String? = nil, authToken: String? = nil) {
        let wsURL =
            baseURL ?? Bundle.main.object(forInfoDictionaryKey: "WS_URL") as? String
            ?? "https://ws.hohma.su"
        self.baseURL = wsURL
        self.authToken = authToken
        setupSocketManager()
    }

    // MARK: - Socket Manager Setup
    private func setupSocketManager() {
        guard let url = URL(string: baseURL) else {
            handleError("Invalid URL: \(baseURL)")
            return
        }

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Socket.IO –∫–ª–∏–µ–Ω—Ç–∞
        let config: SocketIOClientConfiguration = [
            .log(true),  // –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            .compress,
            .forceWebsockets(true),  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º WebSocket
            .reconnects(true),  // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            .reconnectAttempts(10),  // –ú–∞–∫—Å–∏–º—É–º 10 –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            .reconnectWait(2),  // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            .reconnectWaitMax(30),  // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            .forceNew(true),  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            .extraHeaders(["Authorization": "Bearer \(authToken ?? "")"]),  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            .connectParams(["EIO": "4"]),  // –£–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é Engine.IO
        ]

        manager = SocketManager(socketURL: url, config: config)
        socket = manager?.defaultSocket

        setupEventHandlers()

        print("üîå SocketIOServiceV2: Socket manager initialized for \(baseURL)")
    }

    // MARK: - Event Handlers Setup
    private func setupEventHandlers() {
        guard let socket = socket else { return }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        socket.on(clientEvent: .connect) { [weak self] data, ack in
            print("‚úÖ SocketIOServiceV2: Connected successfully")
            print("üìä SocketIOServiceV2: Connect data: \(data)")
            DispatchQueue.main.async {
                self?.isConnected = true
                self?.isConnecting = false
                self?.error = nil
            }

            // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            var connectData = Data()
            if let firstData = data.first {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
                if let arrayData = firstData as? [Any] {
                    // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –µ–≥–æ
                    if let jsonData = try? JSONSerialization.data(
                        withJSONObject: arrayData, options: [])
                    {
                        connectData = jsonData
                    } else {
                        print("‚ö†Ô∏è SocketIOServiceV2: Could not serialize connect array data")
                        connectData = Data()
                    }
                } else if let dictData = firstData as? [String: Any] {
                    // –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –µ–≥–æ
                    if let jsonData = try? JSONSerialization.data(
                        withJSONObject: dictData, options: [])
                    {
                        connectData = jsonData
                    } else {
                        print("‚ö†Ô∏è SocketIOServiceV2: Could not serialize connect dict data")
                        connectData = Data()
                    }
                } else if let stringData = firstData as? String {
                    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Data
                    if let data = stringData.data(using: .utf8) {
                        connectData = data
                    } else {
                        print("‚ö†Ô∏è SocketIOServiceV2: Could not convert connect string data")
                        connectData = Data()
                    }
                } else {
                    print("‚ö†Ô∏è SocketIOServiceV2: Unknown connect data type: \(type(of: firstData))")
                    connectData = Data()
                }
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ç–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ on()
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        socket.on(clientEvent: .disconnect) { [weak self] data, ack in
            print("üîå SocketIOServiceV2: Disconnected")
            DispatchQueue.main.async {
                self?.isConnected = false
                self?.isConnecting = false
            }
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Ç–µ–ø–µ—Ä—å —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ on()
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        socket.on(clientEvent: .error) { [weak self] data, ack in
            if let errorData = data.first as? [String: Any],
                let message = errorData["message"] as? String
            {
                print("‚ùå SocketIOServiceV2: Socket error: \(message)")
                DispatchQueue.main.async {
                    self?.error = message
                }
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        socket.on(clientEvent: .reconnect) { [weak self] data, ack in
            print("üîÑ SocketIOServiceV2: Reconnecting...")
            DispatchQueue.main.async {
                self?.isConnecting = true
            }
        }

        socket.on(clientEvent: .reconnectAttempt) { data, ack in
            if let attempt = data.first as? Int {
                print("üîÑ SocketIOServiceV2: Reconnect attempt \(attempt)")
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ on()
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        print("üìù SocketIOServiceV2: Event handlers will be registered via on() method")
    }

    // MARK: - Connection Management
    func connect() {
        guard let socket = socket else {
            handleError("Socket not initialized")
            return
        }

        guard !isConnecting else {
            print("üîå SocketIOServiceV2: Already connecting, skipping...")
            return
        }

        print("üîå SocketIOServiceV2: Connecting to \(baseURL)")

        DispatchQueue.main.async {
            self.isConnecting = true
            self.error = nil
        }

        socket.connect()
    }

    func disconnect() {
        guard let socket = socket else { return }

        print("üîå SocketIOServiceV2: Disconnecting...")

        DispatchQueue.main.async {
            self.isConnecting = false
            self.isConnected = false
        }

        socket.disconnect()
    }

    // MARK: - Event Handling
    func on(_ event: SocketIOEvent, handler: @escaping (Data) -> Void) {
        guard let socket = socket else {
            print("‚ùå SocketIOServiceV2: Cannot register handler - socket not initialized")
            return
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–ø—Ä—è–º—É—é –≤ —Å–æ–∫–µ—Ç–µ
        socket.on(event.rawValue) { data, ack in
            print("üì® SocketIOServiceV2: Received event: \(event.rawValue)")
            print("üìä SocketIOServiceV2: Event data: \(data)")

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Data –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            var eventData = Data()
            if let firstData = data.first {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
                if let arrayData = firstData as? [Any] {
                    // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –µ–≥–æ
                    if let jsonData = try? JSONSerialization.data(
                        withJSONObject: arrayData, options: [])
                    {
                        eventData = jsonData
                    } else {
                        print(
                            "‚ö†Ô∏è SocketIOServiceV2: Could not serialize array data for event \(event.rawValue)"
                        )
                        eventData = Data()
                    }
                } else if let dictData = firstData as? [String: Any] {
                    // –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –µ–≥–æ
                    if let jsonData = try? JSONSerialization.data(
                        withJSONObject: dictData, options: [])
                    {
                        eventData = jsonData
                    } else {
                        print(
                            "‚ö†Ô∏è SocketIOServiceV2: Could not serialize dict data for event \(event.rawValue)"
                        )
                        eventData = Data()
                    }
                } else if let stringData = firstData as? String {
                    // –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Data
                    if let data = stringData.data(using: .utf8) {
                        eventData = data
                    } else {
                        print(
                            "‚ö†Ô∏è SocketIOServiceV2: Could not convert string data for event \(event.rawValue)"
                        )
                        eventData = Data()
                    }
                } else {
                    // –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞—Ç—å, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
                    print(
                        "‚ö†Ô∏è SocketIOServiceV2: Unknown data type for event \(event.rawValue): \(type(of: firstData))"
                    )
                    eventData = Data()
                }
            }

            // –í—ã–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            handler(eventData)
        }

        print("üìù SocketIOServiceV2: Registered handler for event: \(event.rawValue)")
    }

    // MARK: - Event Emission
    func emit(_ event: SocketIOEvent, data: [String: Any]) {
        guard let socket = socket else {
            print(
                "‚ùå SocketIOServiceV2: Cannot emit event '\(event.rawValue)' - socket not initialized"
            )
            return
        }

        guard isConnected else {
            print("‚ùå SocketIOServiceV2: Cannot emit event '\(event.rawValue)' - not connected")
            return
        }

        print("üì§ SocketIOServiceV2: Emitting event '\(event.rawValue)' with data: \(data)")

        socket.emit(event.rawValue, data)
    }

    func emit(_ event: SocketIOEvent, data: [[String: Any]]) {
        guard let socket = socket else {
            print(
                "‚ùå SocketIOServiceV2: Cannot emit event '\(event.rawValue)' - socket not initialized"
            )
            return
        }

        guard isConnected else {
            print("‚ùå SocketIOServiceV2: Cannot emit event '\(event.rawValue)' - not connected")
            return
        }

        print("üì§ SocketIOServiceV2: Emitting event '\(event.rawValue)' with array data: \(data)")

        socket.emit(event.rawValue, data)
    }

    func emit(_ event: SocketIOEvent, roomId: String, data: [String: Any]) {
        guard let socket = socket else {
            print(
                "‚ùå SocketIOServiceV2: Cannot emit event '\(event.rawValue)' - socket not initialized"
            )
            return
        }

        guard isConnected else {
            print("‚ùå SocketIOServiceV2: Cannot emit event '\(event.rawValue)' - not connected")
            return
        }

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º roomId —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Socket.IO-Client-Swift
        var combinedData = data
        combinedData["roomId"] = roomId

        print(
            "üì§ SocketIOServiceV2: Emitting event '\(event.rawValue)' to room '\(roomId)' with data: \(combinedData)"
        )

        socket.emit(event.rawValue, combinedData)
    }

    // –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ (roomId, data) –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
    func emitToRoom(_ event: SocketIOEvent, roomId: String, data: [String: Any]) {
        guard let socket = socket else {
            print(
                "‚ùå SocketIOServiceV2: Cannot emit event '\(event.rawValue)' - socket not initialized"
            )
            return
        }

        guard isConnected else {
            print("‚ùå SocketIOServiceV2: Cannot emit event '\(event.rawValue)' - not connected")
            return
        }

        print(
            "üì§ SocketIOServiceV2: Emitting event '\(event.rawValue)' to room '\(roomId)' with data: \(data)"
        )

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ (roomId, data) –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
        socket.emit(event.rawValue, roomId, data)
    }

    // MARK: - Private Methods

    private func handleError(_ message: String) {
        DispatchQueue.main.async {
            self.error = message
            self.isConnecting = false
        }
        print("‚ùå SocketIOServiceV2: \(message)")
    }

    // MARK: - Connection Management
    func forceReconnect() {
        print("üîÑ SocketIOServiceV2: Force reconnecting...")
        disconnect()

        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            self.connect()
        }
    }

    // MARK: - Connection State
    func getConnectionState() -> String {
        guard let socket = socket else { return "Not Initialized" }

        switch socket.status {
        case .connected:
            return "Connected"
        case .connecting:
            return "Connecting"
        case .disconnected:
            return "Disconnected"
        case .notConnected:
            return "Not Connected"
        @unknown default:
            return "Unknown"
        }
    }

    // MARK: - Connection State Validation (for compatibility)
    func validateConnectionState() -> Bool {
        guard let socket = socket else { return false }

        // –î–ª—è –Ω–æ–≤–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–∫–µ—Ç–∞
        return socket.status == .connected && isConnected
    }

    // MARK: - Debug Info
    func printDebugInfo() {
        print("üîç SocketIOServiceV2 Debug Info:")
        print("   - Base URL: \(baseURL)")
        print("   - Client ID: \(clientId)")
        print("   - Connection State: \(getConnectionState())")
        print("   - Is Connected: \(isConnected)")
        print("   - Is Connecting: \(isConnecting)")
        print("   - Error: \(error ?? "None")")
        print("   - Socket ID: \(socket?.sid ?? "None")")
        print("   - Manager Status: \(manager?.status.rawValue ?? -1)")
    }
}
