//
//  NetworkManager.swift
//  Hohma
//
//  Created by Artem Vydro on 07.08.2025.
//

import Foundation

@MainActor
final class NetworkManager {
    static let shared = NetworkManager()
    var authViewModel: AuthViewModel?

    func request<T: Decodable>(_ endpoint: URLRequest, decoder: JSONDecoder = .init()) async throws
        -> T
    {
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º decoder –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç
        let customDecoder = JSONDecoder()
        customDecoder.dateDecodingStrategy = .iso8601withMilliseconds

        let (data, response) = try await URLSession.shared.data(for: endpoint)

        if let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode == 401 {
            #if DEBUG
                print("üîê NetworkManager: Received 401 error, logging out user")
            #endif
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ NotificationCenter
            NotificationCenter.default.post(name: .socketAuthorizationError, object: nil)
            // –î–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —Å–æ–∫–µ—Ç–∞
            Task { @MainActor in
                try? await Task.sleep(nanoseconds: 500_000_000)  // 0.5 seconds
                self.authViewModel?.logout()
            }
            throw URLError(.userAuthenticationRequired)
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ HTTP
        if let httpResponse = response as? HTTPURLResponse, httpResponse.statusCode >= 400 {
            #if DEBUG
                print("‚ùå NetworkManager: HTTP error \(httpResponse.statusCode)")
                if let responseString = String(data: data, encoding: .utf8) {
                    print("‚ùå NetworkManager: Error response body: \(responseString)")
                }
            #endif

            // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–∑ tRPC –æ—Ç–≤–µ—Ç–∞
            if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any],
                let error = json["error"] as? [String: Any],
                let message = error["message"] as? String
            {
                throw NSError(
                    domain: "NetworkError", code: httpResponse.statusCode,
                    userInfo: [NSLocalizedDescriptionKey: message])
            } else {
                // –°–æ–∑–¥–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –æ—à–∏–±–∫—É
                let errorMessage = String(data: data, encoding: .utf8) ?? "Unknown error"
                throw NSError(
                    domain: "NetworkError", code: httpResponse.statusCode,
                    userInfo: [NSLocalizedDescriptionKey: errorMessage])
            }
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ tRPC –æ—Ç–≤–µ—Ç
        do {
            return try customDecoder.decode(T.self, from: data)
        } catch {
            // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ tRPC –æ—Ç–≤–µ—Ç —Å –æ–±–µ—Ä—Ç–∫–æ–π
            #if DEBUG
                print("üîç NetworkManager: Trying to decode as tRPC response")
            #endif

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ tRPC –æ—Ç–≤–µ—Ç–æ–º
            if let json = try? JSONSerialization.jsonObject(with: data) as? [String: Any] {
                #if DEBUG
                    print("üîç NetworkManager: Response is valid JSON object")
                #endif
                #if DEBUG
                    print("üîç NetworkManager: Response JSON structure: \(json)")
                #endif

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã tRPC –æ—Ç–≤–µ—Ç–æ–≤
                if let result = json["result"] as? [String: Any],
                    let resultData = result["data"] as? [String: Any],
                    let jsonData = resultData["json"]
                {
                    // –≠—Ç–æ tRPC –æ—Ç–≤–µ—Ç —Å –æ–±–µ—Ä—Ç–∫–æ–π result.data.json
                    #if DEBUG
                        print(
                            "üîç NetworkManager: Extracted tRPC data from result.data.json: \(jsonData)"
                        )
                    #endif

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ jsonData –Ω–µ null –∏ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON –æ–±—ä–µ–∫—Ç–æ–º
                    if jsonData is NSNull {
                        // –ï—Å–ª–∏ jsonData —Ä–∞–≤–µ–Ω null, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
                        let emptyData = Data()
                        return try customDecoder.decode(T.self, from: emptyData)
                    } else if let jsonObject = jsonData as? [String: Any] {
                        // –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å, —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –µ–≥–æ
                        let jsonDataBytes = try JSONSerialization.data(withJSONObject: jsonObject)
                        return try customDecoder.decode(T.self, from: jsonDataBytes)
                    } else if let jsonArray = jsonData as? [Any] {
                        // –ï—Å–ª–∏ —ç—Ç–æ –º–∞—Å—Å–∏–≤, —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –µ–≥–æ
                        let jsonDataBytes = try JSONSerialization.data(withJSONObject: jsonArray)
                        return try customDecoder.decode(T.self, from: jsonDataBytes)
                    } else {
                        // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–º–∏—Ç–∏–≤ (—Å—Ç—Ä–æ–∫–∞, —á–∏—Å–ª–æ, –±—É–ª–µ–≤–æ), —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π JSON
                        let simpleJson = ["value": jsonData]
                        let jsonDataBytes = try JSONSerialization.data(withJSONObject: simpleJson)
                        return try customDecoder.decode(T.self, from: jsonDataBytes)
                    }
                } else if let result = json["result"] {
                    // –≠—Ç–æ tRPC –æ—Ç–≤–µ—Ç —Å –ø—Ä—è–º—ã–º result
                    #if DEBUG
                        print("üîç NetworkManager: Extracted tRPC data from result: \(result)")
                    #endif

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ result –Ω–µ null
                    if result is NSNull {
                        let emptyData = Data()
                        return try customDecoder.decode(T.self, from: emptyData)
                    } else if let resultObject = result as? [String: Any] {
                        let jsonDataBytes = try JSONSerialization.data(withJSONObject: resultObject)
                        return try customDecoder.decode(T.self, from: jsonDataBytes)
                    } else if let resultArray = result as? [Any] {
                        let jsonDataBytes = try JSONSerialization.data(withJSONObject: resultArray)
                        return try customDecoder.decode(T.self, from: jsonDataBytes)
                    } else {
                        let simpleJson = ["value": result]
                        let jsonDataBytes = try JSONSerialization.data(withJSONObject: simpleJson)
                        return try customDecoder.decode(T.self, from: jsonDataBytes)
                    }
                }
            }

            // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ tRPC –æ—Ç–≤–µ—Ç, –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –µ—Å—Ç—å
            #if DEBUG
                print("üîç NetworkManager: Attempting to decode response as direct JSON")
            #endif
            return try customDecoder.decode(T.self, from: data)
        }
    }

    func setAuthViewModel(_ authViewModel: AuthViewModel) {
        self.authViewModel = authViewModel
    }
}
