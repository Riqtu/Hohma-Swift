//
//  VideoPlayerManager.swift
//  Hohma
//
//  Created by Artem Vydro on 03.08.2025.
//
import AVFoundation
import Combine
import SwiftUI

final class VideoPlayerManager: ObservableObject {
    static let shared = VideoPlayerManager()

    // MARK: - Properties
    private var cache: [String: CachedPlayer] = [:]
    private var appLifecycleObservers: [NSObjectProtocol] = []
    private var cancellables = Set<AnyCancellable>()

    // MARK: - Cached Player Structure
    private class CachedPlayer {
        let player: AVPlayer
        var isReady: Bool = false
        var isLoading: Bool = false
        var lastUsed: Date = Date()
        var observers: [NSObjectProtocol] = []
        private var cancellables = Set<AnyCancellable>()
        var restartCount: Int = 0

        init(player: AVPlayer) {
            self.player = player
            setupObservers()
        }

        deinit {
            cleanupObservers()
        }

        private func setupObservers() {
            // Observer –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é
            player.currentItem?.publisher(for: \.status)
                .sink { [weak self] status in
                    DispatchQueue.main.async {
                        print("üé¨ CachedPlayer: –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è –Ω–∞ \(status.rawValue)")

                        switch status {
                        case .readyToPlay:
                            self?.isReady = true
                            self?.isLoading = false
                            print("‚úÖ CachedPlayer: –ü–ª–µ–µ—Ä –≥–æ—Ç–æ–≤ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é")

                            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
                            if let player = self?.player {
                                print(
                                    "üé¨ CachedPlayer: currentTime: \(player.currentTime().seconds)"
                                )
                                print(
                                    "üé¨ CachedPlayer: duration: \(player.currentItem?.duration.seconds ?? 0)"
                                )
                                print("üé¨ CachedPlayer: isPlaying: \(player.rate > 0)")
                            }

                        case .failed:
                            self?.isReady = false
                            self?.isLoading = false
                            print(
                                "‚ùå CachedPlayer: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–µ–µ—Ä–∞: \(self?.player.currentItem?.error?.localizedDescription ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")"
                            )

                        case .unknown:
                            self?.isReady = false
                            self?.isLoading = true
                            print("üîÑ CachedPlayer: –ü–ª–µ–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")

                        @unknown default:
                            self?.isReady = false
                            self?.isLoading = false
                            print("‚ùì CachedPlayer: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞: \(status.rawValue)")
                        }
                    }
                }
                .store(in: &cancellables)

            // Observer –¥–ª—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤–∏–¥–µ–æ
            NotificationCenter.default.publisher(
                for: .AVPlayerItemDidPlayToEndTime, object: player.currentItem
            )
            .sink { [weak self] _ in
                DispatchQueue.main.async {
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö URL
                    if let self = self {
                        self.restartCount += 1

                        // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö URL –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∏ –¥–æ 2 —Ä–∞–∑
                        let maxRestarts = self.player.currentItem?.asset is AVURLAsset ? 2 : 10

                        if self.restartCount <= maxRestarts {
                            print(
                                "üé¨ CachedPlayer: –í–∏–¥–µ–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º (–ø–æ–ø—ã—Ç–∫–∞ \(self.restartCount)/\(maxRestarts))"
                            )

                            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö URL
                            let delay = self.player.currentItem?.asset is AVURLAsset ? 1.0 : 0.1

                            DispatchQueue.main.asyncAfter(deadline: .now() + delay) {
                                self.player.seek(to: .zero)
                                self.player.play()
                            }
                        } else {
                            print("‚èπÔ∏è CachedPlayer: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º")
                            self.player.pause()

                            // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö URL –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤
                            // –ø–æ–º–µ—á–∞–µ–º –ø–ª–µ–µ—Ä –∫–∞–∫ –Ω–µ –≥–æ—Ç–æ–≤—ã–π, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –∑–∞–º–µ–Ω–µ–Ω
                            if self.player.currentItem?.asset is AVURLAsset {
                                self.isReady = false
                                print(
                                    "üîÑ CachedPlayer: –í–Ω–µ—à–Ω–∏–π URL –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ –≥–æ—Ç–æ–≤—ã–π –¥–ª—è –∑–∞–º–µ–Ω—ã")
                            }
                        }
                    }
                }
            }
            .store(in: &cancellables)

            // Observer –¥–ª—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            player.publisher(for: \.rate)
                .sink { rate in
                    DispatchQueue.main.async {
                        if rate == 0 {
                            print("üé¨ CachedPlayer: –ü–ª–µ–µ—Ä –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                        }
                    }
                }
                .store(in: &cancellables)
        }

        private func cleanupObservers() {
            for observer in observers {
                NotificationCenter.default.removeObserver(observer)
            }
            observers.removeAll()
        }

        func updateLastUsed() {
            lastUsed = Date()
        }
    }

    // MARK: - Initialization
    private init() {
        setupAudioSession()
        setupAppLifecycleObservers()
        setupMemoryWarningObserver()
        startCacheCleanupTimer()
    }

    deinit {
        cleanup()
    }

    // MARK: - Setup Methods
    private func setupAudioSession() {
        #if os(iOS)
            do {
                let audioSession = AVAudioSession.sharedInstance()
                try audioSession.setCategory(.playback, mode: .default, options: [.mixWithOthers])
                try audioSession.setActive(true)
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞—É–¥–∏–æ—Å–µ—Å—Å–∏–∏: \(error)")
            }
        #endif
    }

    private func setupAppLifecycleObservers() {
        #if os(iOS)
            let willResignObserver = NotificationCenter.default.addObserver(
                forName: UIApplication.willResignActiveNotification,
                object: nil,
                queue: .main
            ) { [weak self] _ in
                self?.pauseAllPlayers()
            }

            let didBecomeObserver = NotificationCenter.default.addObserver(
                forName: UIApplication.didBecomeActiveNotification,
                object: nil,
                queue: .main
            ) { [weak self] _ in
                self?.resumeAllPlayers()
            }

            let didEnterBackgroundObserver = NotificationCenter.default.addObserver(
                forName: UIApplication.didEnterBackgroundNotification,
                object: nil,
                queue: .main
            ) { [weak self] _ in
                self?.pauseAllPlayers()
            }

            appLifecycleObservers.append(contentsOf: [
                willResignObserver, didBecomeObserver, didEnterBackgroundObserver,
            ])

        #elseif os(macOS)
            let willResignObserver = NotificationCenter.default.addObserver(
                forName: NSApplication.willResignActiveNotification,
                object: nil,
                queue: .main
            ) { [weak self] _ in
                self?.pauseAllPlayers()
            }

            let didBecomeObserver = NotificationCenter.default.addObserver(
                forName: NSApplication.didBecomeActiveNotification,
                object: nil,
                queue: .main
            ) { [weak self] _ in
                self?.resumeAllPlayers()
            }

            appLifecycleObservers.append(contentsOf: [willResignObserver, didBecomeObserver])
        #endif
    }

    private func setupMemoryWarningObserver() {
        #if os(iOS)
            let memoryWarningObserver = NotificationCenter.default.addObserver(
                forName: UIApplication.didReceiveMemoryWarningNotification,
                object: nil,
                queue: .main
            ) { [weak self] _ in
                self?.clearUnusedCache()
            }
            appLifecycleObservers.append(memoryWarningObserver)
        #endif
    }

    private func startCacheCleanupTimer() {
        Timer.publish(every: 60, on: .main, in: .common)
            .autoconnect()
            .sink { [weak self] _ in
                self?.clearUnusedCache()
            }
            .store(in: &cancellables)
    }

    // MARK: - Public Methods
    func player(resourceName: String, resourceExtension: String = "mp4") -> AVPlayer? {
        let key = "\(resourceName).\(resourceExtension)"

        print("üé¨ VideoPlayerManager: –ó–∞–ø—Ä–æ—Å –ø–ª–µ–µ—Ä–∞ –¥–ª—è \(key)")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if let cachedPlayer = cache[key] {
            cachedPlayer.updateLastUsed()
            print(
                "üé¨ VideoPlayerManager: –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–µ–µ—Ä –¥–ª—è \(key), –≥–æ—Ç–æ–≤: \(cachedPlayer.isReady), –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è: \(cachedPlayer.isLoading)"
            )

            // –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –≥–æ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if cachedPlayer.isReady {
                print("‚úÖ VideoPlayerManager: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –ø–ª–µ–µ—Ä –¥–ª—è \(key)")
                return cachedPlayer.player
            }

            // –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –∂–¥–µ–º
            if cachedPlayer.isLoading {
                print("üîÑ VideoPlayerManager: –ü–ª–µ–µ—Ä \(key) –≤—Å–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ")
                return cachedPlayer.player
            }

            // –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –≤ –ø–ª–æ—Ö–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (failed), —É–¥–∞–ª—è–µ–º –µ–≥–æ
            if cachedPlayer.player.currentItem?.status == .failed {
                print("‚ùå VideoPlayerManager: –£–¥–∞–ª—è–µ–º –ø–ª–æ—Ö–æ–π –ø–ª–µ–µ—Ä –¥–ª—è \(key)")
                removePlayer(for: key)
            } else {
                // –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –≤ unknown —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –¥–∞–µ–º –µ–º—É –≤—Ä–µ–º—è
                print("‚è≥ VideoPlayerManager: –ü–ª–µ–µ—Ä \(key) –≤ unknown —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –¥–∞–µ–º –≤—Ä–µ–º—è")
                return cachedPlayer.player
            }
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–µ–µ—Ä
        guard let url = Bundle.main.url(forResource: resourceName, withExtension: resourceExtension)
        else {
            print(
                "‚ùå VideoPlayerManager: –í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ Bundle: \(resourceName).\(resourceExtension)"
            )
            print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –≤ Bundle:")
            if let resourcePath = Bundle.main.resourcePath {
                do {
                    let contents = try FileManager.default.contentsOfDirectory(atPath: resourcePath)
                    contents.filter { $0.hasSuffix(".mp4") }.forEach { print("   - \($0)") }
                } catch {
                    print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: \(error)")
                }
            }
            return nil
        }

        print("‚úÖ VideoPlayerManager: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–µ–µ—Ä –¥–ª—è \(url)")
        return createPlayer(for: url, key: key)
    }

    func player(url: URL) -> AVPlayer {
        let key = url.absoluteString
        print("üé¨ VideoPlayerManager: –ó–∞–ø—Ä–æ—Å –ø–ª–µ–µ—Ä–∞ –¥–ª—è URL: \(key)")

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if let cachedPlayer = cache[key] {
            print(
                "üé¨ VideoPlayerManager: –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–µ–µ—Ä –¥–ª—è URL, –≥–æ—Ç–æ–≤: \(cachedPlayer.isReady)"
            )

            // –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –≥–æ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if cachedPlayer.isReady {
                print("‚úÖ VideoPlayerManager: –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–µ–µ—Ä")
                cachedPlayer.lastUsed = Date()
                return cachedPlayer.player
            }

            // –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –¥–∞–µ–º –µ–º—É –µ—â–µ –≤—Ä–µ–º—è
            let timeSinceCreation = Date().timeIntervalSince(cachedPlayer.lastUsed)
            let maxWaitTime = url.scheme == "http" || url.scheme == "https" ? 5.0 : 10.0

            if timeSinceCreation < maxWaitTime {
                print(
                    "üîÑ VideoPlayerManager: –ü–ª–µ–µ—Ä –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –¥–∞–µ–º –≤—Ä–µ–º—è (\(Int(maxWaitTime - timeSinceCreation))—Å)"
                )
                cachedPlayer.lastUsed = Date()
                return cachedPlayer.player
            }

            // –ï—Å–ª–∏ –ø–ª–µ–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ, —É–¥–∞–ª—è–µ–º –µ–≥–æ
            print("‚è∞ VideoPlayerManager: –ü–ª–µ–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ, —É–¥–∞–ª—è–µ–º")
            cache.removeValue(forKey: key)
        }

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–µ–µ—Ä
        print("‚úÖ VideoPlayerManager: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–ª–µ–µ—Ä –¥–ª—è URL: \(key)")
        return createPlayer(for: url, key: key)
    }

    // MARK: - Private Methods
    private func createPlayer(for url: URL, key: String) -> AVPlayer {
        print("üé¨ VideoPlayerManager: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ –¥–ª—è \(url)")

        let player: AVPlayer

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL –≤–Ω–µ—à–Ω–∏–º
        if url.scheme == "http" || url.scheme == "https" {
            // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö URL –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
            print("üé¨ VideoPlayerManager: –í–Ω–µ—à–Ω–∏–π URL, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–æ–≤–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")

            // –°–æ–∑–¥–∞–µ–º AVPlayerItem —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
            let playerItem = AVPlayerItem(url: url)

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –±–µ–∑ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            playerItem.preferredForwardBufferDuration = 5.0  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            playerItem.canUseNetworkResourcesForLiveStreamingWhilePaused = true

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            playerItem.preferredPeakBitRate = 0  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –±–∏—Ç—Ä–µ–π—Ç–∞

            // –°–æ–∑–¥–∞–µ–º –ø–ª–µ–µ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º item
            player = AVPlayer(playerItem: playerItem)

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö URL
            player.automaticallyWaitsToMinimizeStalling = true  // –í–∫–ª—é—á–∞–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            player.allowsExternalPlayback = false

        } else {
            // –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥
            player = AVPlayer(url: url)
            player.automaticallyWaitsToMinimizeStalling = false
        }

        player.isMuted = true
        player.actionAtItemEnd = .none

        print(
            "üé¨ VideoPlayerManager: –ü–ª–µ–µ—Ä —Å–æ–∑–¥–∞–Ω, currentItem: \(player.currentItem?.description ?? "nil")"
        )

        // –°–æ–∑–¥–∞–µ–º cached player
        let cachedPlayer = CachedPlayer(player: player)
        cache[key] = cachedPlayer

        // –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        print("üé¨ VideoPlayerManager: –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
        player.play()

        return player
    }

    func pauseAllPlayers() {
        for (_, cachedPlayer) in cache {
            if cachedPlayer.player.timeControlStatus == .playing {
                cachedPlayer.player.pause()
            }
        }
    }

    func resumeAllPlayers() {
        for (_, cachedPlayer) in cache {
            if cachedPlayer.player.timeControlStatus == .paused && cachedPlayer.isReady {
                cachedPlayer.player.play()
            }
        }
    }

    private func clearUnusedCache() {
        let now = Date()
        let unusedThreshold: TimeInterval = 300  // 5 –º–∏–Ω—É—Ç

        let keysToRemove = cache.compactMap { key, cachedPlayer in
            now.timeIntervalSince(cachedPlayer.lastUsed) > unusedThreshold ? key : nil
        }

        for key in keysToRemove {
            removePlayer(for: key)
        }

        // –ï—Å–ª–∏ –∫—ç—à –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —É–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ
        if cache.count > 5 {
            let sortedKeys = cache.sorted { $0.value.lastUsed < $1.value.lastUsed }
            let keysToRemove = sortedKeys.prefix(cache.count - 3).map { $0.key }

            for key in keysToRemove {
                removePlayer(for: key)
            }
        }
    }

    private func removePlayer(for key: String) {
        guard let cachedPlayer = cache[key] else { return }

        cachedPlayer.player.pause()
        cache.removeValue(forKey: key)
    }

    private func cleanup() {
        // –û—á–∏—â–∞–µ–º –∫—ç—à
        for (_, cachedPlayer) in cache {
            cachedPlayer.player.pause()
        }
        cache.removeAll()

        // –£–¥–∞–ª—è–µ–º observers
        for observer in appLifecycleObservers {
            NotificationCenter.default.removeObserver(observer)
        }
        appLifecycleObservers.removeAll()

        // –û—Ç–º–µ–Ω—è–µ–º cancellables
        cancellables.removeAll()
    }

    // MARK: - Public Utility Methods
    func clearCache() {
        for (_, cachedPlayer) in cache {
            cachedPlayer.player.pause()
        }
        cache.removeAll()
    }

    func removePlayerFromCache(for key: String) {
        removePlayer(for: key)
    }

    func preloadVideo(resourceName: String, resourceExtension: String = "mp4") {
        _ = player(resourceName: resourceName, resourceExtension: resourceExtension)
    }

    func preloadVideo(url: URL) {
        _ = player(url: url)
    }
}
