import AVFoundation
import Inject
import SwiftUI

struct HomeHeader: View {
    @StateObject private var videoManager = VideoPlayerManager.shared
    @State private var player: AVPlayer?
    @State private var isVideoReady: Bool = false
    @State private var playerObserver: NSKeyValueObservation?
    @Environment(\.scenePhase) private var scenePhase
    @ObserveInjection var inject

    var body: some View {
        ZStack {
            if let player = player, isVideoReady {
                VideoBackgroundView(player: player)
                    .frame(height: 250)
                    .clipped()
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç –ø–æ–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                AnimatedGradientBackground()
                    .frame(height: 250)
                    .clipped()
            }

            // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π –æ–≤–µ—Ä–ª–µ–π
            Color.black.opacity(0.7)
                .frame(height: 250)

            VStack(spacing: 10) {
                Text("XOXMA")
                    .font(.custom("Luckiest Guy", size: 24))
                    .foregroundColor(.white)

                Text("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —Å–≤–æ–∏—Ö.\n–í—Å—ë, —á—Ç–æ –≤–∞–∂–Ω–æ ‚Äî –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ.")
                    .font(.headline)
                    .multilineTextAlignment(.center)
                    .foregroundColor(.white.opacity(0.9))
            }
            .padding()
        }
        .frame(height: 250)
        .onAppear {
            setupPlayer()
        }
        .onDisappear {
            cleanupPlayer()
        }
        .onChange(of: scenePhase) { _, newPhase in
            handleScenePhaseChange(newPhase)
        }
        .enableInjection()
    }

    private func setupPlayer() {
        print("üè† HomeHeader: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–µ–µ—Ä–∞")

        // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        videoManager.preloadVideo(resourceName: "background")

        // –ü–æ–ª—É—á–∞–µ–º –ø–ª–µ–µ—Ä
        player = videoManager.player(resourceName: "background")

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º observer –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        if let player = player {
            setupPlayerObserver(player)
        }
    }

    private func setupPlayerObserver(_ player: AVPlayer) {
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π observer
        playerObserver?.invalidate()

        playerObserver = player.currentItem?.observe(\.status, options: [.new]) { item, _ in
            DispatchQueue.main.async {
                print("üè† HomeHeader: –°—Ç–∞—Ç—É—Å –ø–ª–µ–µ—Ä–∞: \(item.status.rawValue)")
                self.isVideoReady = item.status == .readyToPlay
                if self.isVideoReady {
                    print("üè† HomeHeader: –ü–ª–µ–µ—Ä –≥–æ—Ç–æ–≤, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
                    player.play()
                }
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        if player.currentItem?.status == .readyToPlay {
            print("üè† HomeHeader: –ü–ª–µ–µ—Ä —É–∂–µ –≥–æ—Ç–æ–≤")
            self.isVideoReady = true
            player.play()
        }
    }

    private func cleanupPlayer() {
        print("üè† HomeHeader: –û—á–∏—Å—Ç–∫–∞ –ø–ª–µ–µ—Ä–∞")
        playerObserver?.invalidate()
        playerObserver = nil
        player?.pause()
        player = nil
        isVideoReady = false
    }

    private func handleScenePhaseChange(_ newPhase: ScenePhase) {
        switch newPhase {
        case .active:
            if isVideoReady {
                player?.play()
            }
        case .inactive, .background:
            player?.pause()
        @unknown default:
            break
        }
    }
}

#Preview {
    HomeHeader()
}
