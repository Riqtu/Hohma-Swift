import Foundation
import SwiftUI

// –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —è—á–µ–π–∫–∏ –¥–æ—Ä–æ–≥–∏
struct RaceCellData: Identifiable {
    let id = UUID()
    let position: Int
    let isActive: Bool
    let type: CellType
    let participants: [ParticipantPosition]  // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏

    enum CellType {
        case normal, boost, obstacle, bonus, finish
    }
}

// –ü–æ–∑–∏—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –¥–æ—Ä–æ–≥–µ
struct ParticipantPosition: Identifiable {
    let id = UUID()
    let participantId: String
    let userId: String
    let userName: String
    let avatarUrl: String?
    let isCurrentUser: Bool
}

class RaceViewModel: ObservableObject, TRPCServiceProtocol {
    @Published var race: Race?
    @Published var raceCells: [RaceCellData] = []
    @Published var participants: [RaceParticipant] = []
    @Published var currentUserParticipant: RaceParticipant?
    @Published var isMyTurn: Bool = false
    @Published var isLoading: Bool = false
    @Published var errorMessage: String?
    @Published var diceRoll: Int = 0
    @Published var canMakeMove: Bool = false

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    @Published var isAnimating: Bool = false
    @Published var animationProgress: Double = 0.0
    @Published var previousPositions: [String: Int] = [:]  // participantId -> previous position
    @Published var currentAnimationStep: Int = 0  // –¢–µ–∫—É—â–∏–π —à–∞–≥ –∞–Ω–∏–º–∞—Ü–∏–∏
    @Published var totalAnimationSteps: Int = 0  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤

    // –°–∏—Å—Ç–µ–º–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—à–∞–≥–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    @Published var participantAnimationSteps: [String: [Int]] = [:]  // participantId -> –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤
    @Published var currentStepPosition: [String: Double] = [:]  // participantId -> —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –∞–Ω–∏–º–∞—Ü–∏–∏ (–¥—Ä–æ–±–Ω–∞—è)
    @Published var isJumping: [String: Bool] = [:]  // participantId -> –ø—Ä—ã–≥–∞–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å
    @Published var animationStepProgress: [String: Double] = [:]  // participantId -> –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ (0.0-1.0)

    private var raceId: String?

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è preview
    }

    func loadRace(_ race: Race) {
        self.race = race
        self.raceId = race.id
        self.participants = race.participants ?? []

        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if let currentUserId = trpcService.currentUser?.id {
            currentUserParticipant = participants.first { $0.userId == currentUserId }
        }

        generateRaceCells()
        updateGameState()
    }

    private func generateRaceCells() {
        guard let race = race else { return }

        raceCells = (0..<race.road.length).map { position in
            let cellType: RaceCellData.CellType
            if let roadCell = race.road.cells?.first(where: { $0.position == position }) {
                switch roadCell.cellType {
                case .normal: cellType = .normal
                case .boost: cellType = .boost
                case .obstacle: cellType = .obstacle
                case .bonus: cellType = .bonus
                case .finish: cellType = .finish
                }
            } else {
                cellType = position == race.road.length - 1 ? .finish : .normal
            }

            // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
            let participantsOnPosition = participants.compactMap {
                participant -> ParticipantPosition? in
                guard participant.currentPosition == position else { return nil }

                return ParticipantPosition(
                    participantId: participant.id,
                    userId: participant.userId,
                    userName: participant.user.name ?? participant.user.username ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    avatarUrl: participant.user.avatarUrl,
                    isCurrentUser: participant.userId == trpcService.currentUser?.id
                )
            }

            return RaceCellData(
                position: position,
                isActive: participantsOnPosition.contains { $0.isCurrentUser },
                type: cellType,
                participants: participantsOnPosition
            )
        }
    }

    private func updateGameState() {
        guard let race = race else { return }

        // –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ö–æ–¥ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –µ—Å–ª–∏ —Å–∫–∞—á–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        canMakeMove =
            race.status == .running && currentUserParticipant != nil
            && !(currentUserParticipant?.isFinished ?? true)

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—á–µ—Ä–µ–¥—å –ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        isMyTurn = canMakeMove
    }

    func makeMove() {
        print("üé≤ makeMove() –≤—ã–∑–≤–∞–Ω–∞")
        guard canMakeMove, let raceId = raceId, !isAnimating else {
            print(
                "‚ùå makeMove() –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: canMakeMove=\(canMakeMove), raceId=\(raceId != nil), isAnimating=\(isAnimating)"
            )
            return
        }

        print("‚úÖ makeMove() –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
        isLoading = true
        errorMessage = nil

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        let currentPositions = Dictionary(
            uniqueKeysWithValues: participants.map { ($0.id, $0.currentPosition) })

        print("üìç –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏: \(currentPositions)")

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ (1-6) –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        let diceRoll = Int.random(in: 1...6)
        self.diceRoll = diceRoll
        print("üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞: \(diceRoll)")

        let request: [String: Any] = [
            "raceId": raceId,
            "diceRoll": diceRoll,
        ]

        Task {
            do {
                print("üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
                let _: MakeMoveResponse = try await trpcService.executePOST(
                    endpoint: "race.makeMove",
                    body: request
                )
                print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω")

                await MainActor.run {
                    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ö–æ–¥–∞...")
                    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ö–æ–¥–∞
                    self.refreshRaceAndStartAnimation(withPreviousPositions: currentPositions)
                    self.isLoading = false
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö–æ–¥–∞: \(error)")
                await MainActor.run {
                    self.errorMessage = "–û—à–∏–±–∫–∞ —Ö–æ–¥–∞: \(error.localizedDescription)"
                    self.isLoading = false
                }
            }
        }
    }

    private func startAnimation(withPreviousPositions previousPositions: [String: Int]) {
        print("üöÄ startAnimation() –≤—ã–∑–≤–∞–Ω–∞")
        isAnimating = true

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.previousPositions = previousPositions

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        prepareAnimationSteps()

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        print("üé¨ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        animateAllParticipantsSimultaneously()
    }

    private func prepareAnimationSteps() {
        participantAnimationSteps.removeAll()
        currentStepPosition.removeAll()
        isJumping.removeAll()
        animationStepProgress.removeAll()

        for participant in participants {
            guard let previousPos = previousPositions[participant.id] else { continue }
            let currentPos = participant.currentPosition
            let distance = currentPos - previousPos

            if distance > 0 {
                // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤ –í–ö–õ–Æ–ß–ê–Ø –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                var steps: [Int] = []
                // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏–¥–µ–º –¥–æ —Ç–µ–∫—É—â–µ–π
                for step in 0...distance {
                    steps.append(previousPos + step)
                }
                participantAnimationSteps[participant.id] = steps
                currentStepPosition[participant.id] = Double(previousPos)  // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                isJumping[participant.id] = false
                animationStepProgress[participant.id] = 0.0

                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                print(
                    "üöÄ –£—á–∞—Å—Ç–Ω–∏–∫ \(participant.id): –±—ã–ª–æ \(previousPos), —Å—Ç–∞–ª–æ \(currentPos), —à–∞–≥–∏: \(steps)"
                )
            }
        }
    }

    private func animateAllParticipantsSimultaneously() {
        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        let maxSteps = participantAnimationSteps.values.map { $0.count }.max() ?? 0

        print("üé¨ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: \(maxSteps)")

        // –ê–Ω–∏–º–∏—Ä—É–µ–º –≤—Å–µ —à–∞–≥–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        animateStep(stepIndex: 0, maxSteps: maxSteps)
    }

    private func animateStep(stepIndex: Int, maxSteps: Int) {
        guard stepIndex < maxSteps else {
            print("‚úÖ –í—Å–µ —à–∞–≥–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º")
            finishAnimation()
            return
        }

        print("üéØ –ê–Ω–∏–º–∏—Ä—É–µ–º —à–∞–≥ \(stepIndex + 1)/\(maxSteps)")

        // –ê–Ω–∏–º–∏—Ä—É–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
        for participant in participants {
            guard let steps = participantAnimationSteps[participant.id],
                stepIndex < steps.count
            else { continue }

            let targetPosition = steps[stepIndex]

            print("üéØ –£—á–∞—Å—Ç–Ω–∏–∫ \(participant.id): —à–∞–≥ \(stepIndex), –ø–æ–∑–∏—Ü–∏—è \(targetPosition)")

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä—ã–∂–∫–∞
            isJumping[participant.id] = true

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ä–∞–∑—É –Ω–∞ —Ü–µ–ª—É—é –∫–ª–µ—Ç–∫—É
            currentStepPosition[participant.id] = Double(targetPosition)
            animationStepProgress[participant.id] = 1.0
        }

        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
        impactFeedback.impactOccurred()

        // –ü–∞—É–∑–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.4) {
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä—ã–∂–∫–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for participant in self.participants {
                self.isJumping[participant.id] = false
            }

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                self.animateStep(stepIndex: stepIndex + 1, maxSteps: maxSteps)
            }
        }
    }

    private func finishAnimation() {
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
            withAnimation(.easeOut(duration: 0.2)) {
                self.isAnimating = false
            }

            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
                self.animationProgress = 0.0
                self.currentAnimationStep = 0
                self.totalAnimationSteps = 0
                self.previousPositions.removeAll()
                self.participantAnimationSteps.removeAll()
                self.currentStepPosition.removeAll()
                self.isJumping.removeAll()
                self.animationStepProgress.removeAll()
            }
        }
    }

    func refreshRace() {
        guard let raceId = raceId else { return }

        Task {
            do {
                let response: Race = try await trpcService.executeGET(
                    endpoint: "race.getRaceById",
                    input: ["id": raceId, "includeParticipants": true]
                )

                await MainActor.run {
                    self.loadRace(response)
                }
            } catch {
                await MainActor.run {
                    self.errorMessage = "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: \(error.localizedDescription)"
                }
            }
        }
    }

    func refreshRaceAndStartAnimation(withPreviousPositions previousPositions: [String: Int]) {
        guard let raceId = raceId else { return }

        Task {
            do {
                let response: Race = try await trpcService.executeGET(
                    endpoint: "race.getRaceById",
                    input: ["id": raceId, "includeParticipants": true]
                )

                await MainActor.run {
                    self.loadRace(response)

                    print("üé¨ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è...")
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
                    self.startAnimation(withPreviousPositions: previousPositions)
                }
            } catch {
                await MainActor.run {
                    self.errorMessage = "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: \(error.localizedDescription)"
                }
            }
        }
    }
}
