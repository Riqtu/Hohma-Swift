import Foundation
import SwiftUI

final class RaceSocketManager {
    private let socket: SocketIOServiceAdapter

    // Callbacks to VM/UI
    var onRaceUpdate: (([String: Any]) -> Void)?
    var onRaceState: (([String: Any]) -> Void)?
    var onRaceDiceOpen: (([String: Any]) -> Void)?
    var onRaceDiceResults: (([String: Any]) -> Void)?
    var onRaceDiceNext: (([String: Any]) -> Void)?
    var onRaceFinish: (([String: Any]) -> Void)?

    init(socket: SocketIOServiceAdapter) {
        self.socket = socket
        setupHandlers()
    }

    private func setupHandlers() {
        socket.on(.connect) { _ in
            print("üîå RaceSocketManager: connected")
        }

        socket.on(.raceUpdate) { [weak self] data in
            guard let self = self else { return }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                    print("üèÅ RaceSocketManager: race:update -> keys=\(Array(json.keys))")
                    self.onRaceUpdate?(json)
                }
            } catch {
                print("‚ùå RaceSocketManager: failed to parse race:update payload: \(error)")
            }
        }

        socket.on(.raceState) { [weak self] data in
            guard let self = self else { return }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                    print("üì¶ RaceSocketManager: race:state received")
                    self.onRaceState?(json)
                }
            } catch {
                print("‚ùå RaceSocketManager: failed to parse race:state payload: \(error)")
            }
        }

        socket.on(.raceDiceOpen) { [weak self] data in
            guard let self = self else { return }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                    print("üé≤ RaceSocketManager: race:dice:open received")
                    self.onRaceDiceOpen?(json)
                }
            } catch {
                print("‚ùå RaceSocketManager: failed to parse race:dice:open payload: \(error)")
            }
        }

        socket.on(.raceDiceResults) { [weak self] data in
            guard let self = self else { return }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                    print("üé≤ RaceSocketManager: race:dice:results received")
                    self.onRaceDiceResults?(json)
                }
            } catch {
                print("‚ùå RaceSocketManager: failed to parse race:dice:results payload: \(error)")
            }
        }

        socket.on(.raceDiceNext) { [weak self] data in
            guard let self = self else { return }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                    print("‚û°Ô∏è RaceSocketManager: race:dice:next received")
                    self.onRaceDiceNext?(json)
                }
            } catch {
                print("‚ùå RaceSocketManager: failed to parse race:dice:next payload: \(error)")
            }
        }

        socket.on(.raceFinish) { [weak self] data in
            guard let self = self else { return }
            do {
                if let json = try JSONSerialization.jsonObject(with: data) as? [String: Any] {
                    print("üèÅ RaceSocketManager: race:finish received")
                    self.onRaceFinish?(json)
                }
            } catch {
                print("‚ùå RaceSocketManager: failed to parse race:finish payload: \(error)")
            }
        }
    }

    func connectIfNeeded() {
        if !socket.isConnected && !socket.isConnecting {
            socket.connect()
        }
    }

    func joinRoom(raceId: String, userId: String) {
        let payload: [String: Any] = [
            "roomId": raceId,
            "userId": userId,
        ]
        socket.emit(.joinRoom, data: payload)
    }

    func leaveRoom(raceId: String) {
        socket.emit(.leaveRoom, data: ["roomId": raceId])
    }

    func requestState(raceId: String) {
        socket.emit(.raceRequestState, roomId: raceId, data: [:])
    }

    func emitRaceUpdate(raceId: String, payload: [String: Any]) {
        socket.emit(.raceUpdate, roomId: raceId, data: payload)
    }

    func emitDiceOpen(raceId: String, roundId: String) {
        socket.emit(.raceDiceOpen, roomId: raceId, data: ["roundId": roundId])
    }

    func emitDiceResults(raceId: String, roundId: String, diceResults: [String: Int]) {
        socket.emit(
            .raceDiceResults,
            roomId: raceId,
            data: [
                "roundId": roundId,
                "diceResults": diceResults,
            ]
        )
    }

    func emitDiceNext(raceId: String) {
        socket.emit(.raceDiceNext, roomId: raceId, data: [:])
    }

    func emitFinish(raceId: String, finishingParticipants: [String], winnerId: String?) {
        var payload: [String: Any] = ["finishingParticipants": finishingParticipants]
        if let w = winnerId { payload["winnerId"] = w }
        socket.emit(.raceFinish, roomId: raceId, data: payload)
    }
}

// –ú–æ–¥–µ–ª—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —è—á–µ–π–∫–∏ –¥–æ—Ä–æ–≥–∏
struct RaceCellData: Identifiable {
    let id = UUID()
    let position: Int
    let isActive: Bool
    let type: CellType
    let participants: [ParticipantPosition]  // –£—á–∞—Å—Ç–Ω–∏–∫–∏ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏

    enum CellType {
        case normal, boost, obstacle, bonus, finish
    }
}

// –ü–æ–∑–∏—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ –¥–æ—Ä–æ–≥–µ
struct ParticipantPosition: Identifiable {
    let id = UUID()
    let participantId: String
    let userId: String
    let userName: String
    let avatarUrl: String?
    let isCurrentUser: Bool
}

class RaceViewModel: ObservableObject, TRPCServiceProtocol {
    @Published var race: Race?
    @Published var raceCells: [RaceCellData] = []
    @Published var participants: [RaceParticipant] = []
    @Published var currentUserParticipant: RaceParticipant?
    @Published var isMyTurn: Bool = false
    @Published var isLoading: Bool = false
    @Published var errorMessage: String?
    @Published var diceRoll: Int = 0
    @Published var canMakeMove: Bool = false

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–Ω–∏—è
    @Published var raceFinished: Bool = false
    @Published var finishingParticipants: [String] = []
    @Published var winnerId: String?
    @Published var showingWinnerSelection: Bool = false

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –∫—É–±–∏–∫–æ–≤
    @Published var showingDiceRoll: Bool = false
    @Published var diceResults: [String: Int] = [:]
    @Published var isDiceInitiator: Bool = false
    @Published var currentDiceRoundId: String?

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    @Published var isAnimating: Bool = false
    @Published var animationProgress: Double = 0.0
    @Published var previousPositions: [String: Int] = [:]  // participantId -> previous position
    @Published var currentAnimationStep: Int = 0  // –¢–µ–∫—É—â–∏–π —à–∞–≥ –∞–Ω–∏–º–∞—Ü–∏–∏
    @Published var totalAnimationSteps: Int = 0  // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤

    // –°–∏—Å—Ç–µ–º–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—à–∞–≥–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏
    @Published var participantAnimationSteps: [String: [Int]] = [:]  // participantId -> –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤
    @Published var currentStepPosition: [String: Double] = [:]  // participantId -> —Ç–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –∞–Ω–∏–º–∞—Ü–∏–∏ (–¥—Ä–æ–±–Ω–∞—è)
    @Published var isJumping: [String: Bool] = [:]  // participantId -> –ø—Ä—ã–≥–∞–µ—Ç –ª–∏ —Å–µ–π—á–∞—Å
    @Published var animationStepProgress: [String: Double] = [:]  // participantId -> –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ (0.0-1.0)

    private var raceId: String?
    private var raceSocketManager: RaceSocketManager?
    // –§–ª–∞–≥ –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞ —ç–∫—Ä–∞–Ω–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    @Published private var suppressWinnerPresentation: Bool = false

    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è preview
    }

    deinit {
        // –û—á–∏—â–∞–µ–º –∫—ç—à –∞–≤–∞—Ç–∞—Ä–æ–∫ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ ViewModel
        clearAvatarCache()
    }

    func loadRace(_ race: Race) {
        self.race = race
        self.raceId = race.id
        self.participants = race.participants ?? []

        // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–µ–¥–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        if let currentUserId = trpcService.currentUser?.id {
            currentUserParticipant = participants.first { $0.userId == currentUserId }
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–∫
        initializeParticipantPositions()

        generateRaceCells()
        updateGameState()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –≥–æ–Ω–∫–∞
        if race.status == .finished {
            handleFinishedRace()
        }

        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        preloadParticipantAvatars()

        // ========= Socket wiring =========
        setupRaceSocketIfNeeded()
        joinRaceRoomIfPossible()
    }

    private func initializeParticipantPositions() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–∫
        for participant in participants {
            currentStepPosition[participant.id] = Double(participant.currentPosition)
            isJumping[participant.id] = false
            animationStepProgress[participant.id] = 1.0
        }
    }

    /// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private func preloadParticipantAvatars() {
        AvatarCacheService.shared.preloadAvatars(for: participants)
    }

    /// –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∞–≤–∞—Ç–∞—Ä–æ–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∫–∞—á–∫–∏
    private func clearAvatarCache() {
        // –û—á–∏—â–∞–µ–º –∫—ç—à –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        for participant in participants {
            AvatarCacheService.shared.clearCache(for: participant.user.id)
        }
    }

    private func handleFinishedRace() {
        // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if let serverWinnerId = race?.winnerParticipantId,
            let winner = participants.first(where: { $0.id == serverWinnerId })
        {
            self.winnerId = winner.id
            print(
                "üèÅ –ì–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å (—Å —Å–µ—Ä–≤–µ—Ä–∞): \(winner.user.name ?? winner.user.username ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")"
            )
        } else if let winner = participants.first(where: { $0.finalPosition == 1 }) {
            self.winnerId = winner.id
            print(
                "üèÅ –ì–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ finalPosition: \(winner.user.name ?? winner.user.username ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")"
            )
        }

        // –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤—à–∏—Ö
        let finishers =
            participants
            .filter { ($0.finalPosition ?? 0) > 0 }
            .sorted { ($0.finalPosition ?? Int.max) < ($1.finalPosition ?? Int.max) }
            .map { $0.id }
        self.finishingParticipants = finishers

        // –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º, –µ—Å–ª–∏ –∏–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞–Ω–∏–º–∞—Ü–∏–µ–π
        guard !suppressWinnerPresentation else { return }

        // –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å —É–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–∑—É
        if self.winnerId != nil {
            self.raceFinished = true
        } else if self.finishingParticipants.count > 1 {
            // –ù–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª–∏, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ù–ï –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω ‚Äî –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            self.showingWinnerSelection = true
            self.raceFinished = false
        } else if self.finishingParticipants.count == 1 {
            // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ñ–∏–Ω–∏—à–µ—Ä ‚Äî –æ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
            self.winnerId = self.finishingParticipants.first
            self.raceFinished = true
        }

        // –û—á–∏—â–∞–µ–º –∫—ç—à –∞–≤–∞—Ç–∞—Ä–æ–∫ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∫–∞—á–∫–∏ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
        DispatchQueue.main.asyncAfter(deadline: .now() + 5.0) {
            self.clearAvatarCache()
        }
    }

    private func setupRaceSocketIfNeeded() {
        if raceSocketManager == nil {
            let socketAdapter = SocketIOServiceAdapter()
            let manager = RaceSocketManager(socket: socketAdapter)
            manager.onRaceUpdate = { [weak self] (payload: [String: Any]) in
                guard let self = self else { return }
                // –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ‚Äî –æ—Å–≤–µ–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π
                let prev = Dictionary(
                    uniqueKeysWithValues: self.participants.map { ($0.id, $0.currentPosition) })
                self.refreshRaceAndStartAnimation(withPreviousPositions: prev)
            }
            manager.onRaceState = { [weak self] (_: [String: Any]) in
                self?.refreshRace()
            }
            // –û—Ç–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∫—É–±–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ —Ñ–∏–∫—Å–∞—Ü–∏—è —Ä–∞—É–Ω–¥–∞; —É –∫–ª–∏–µ–Ω—Ç–æ–≤ –æ–∫–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ results)
            manager.onRaceDiceOpen = { [weak self] (payload: [String: Any]) in
                guard let self = self else { return }
                DispatchQueue.main.async {
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ –∏–∑ payload, –µ—Å–ª–∏ –µ—Å—Ç—å
                    if let roundId = payload["roundId"] as? String {
                        // –ù–æ–≤—ã–π —Ä–∞—É–Ω–¥ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                        if self.currentDiceRoundId != roundId {
                            self.currentDiceRoundId = roundId
                            self.diceResults = [:]
                        }
                    }
                    self.isDiceInitiator = false
                    // –ù–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è; –æ—Ç–∫—Ä–æ–µ–º –ø–æ results
                }
            }
            // –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∏–∫–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (–≤–∏–∑—É–∞–ª—å–Ω–æ), –Ω–µ –¥–µ—Ä–≥–∞—è HTTP
            manager.onRaceDiceResults = { [weak self] (payload: [String: Any]) in
                guard let self = self else { return }
                DispatchQueue.main.async {
                    let incomingRoundId = payload["roundId"] as? String
                    // –ï—Å–ª–∏ roundId –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ –ø–æ –ø–µ—Ä–≤—ã–º –ø—Ä–∏—à–µ–¥—à–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                    if self.currentDiceRoundId == nil, let r = incomingRoundId {
                        self.currentDiceRoundId = r
                        self.diceResults = [:]
                    }
                    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ)
                    if incomingRoundId == nil || incomingRoundId == self.currentDiceRoundId {
                        if let dice = payload["diceResults"] as? [String: Int] {
                            self.diceResults = dice
                        }
                    }
                    // –ù–µ –ø–µ—Ä–µ–æ—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —É –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –ø—Ä–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º broadcast
                    if !self.isDiceInitiator {
                        self.showingDiceRoll = true
                    }
                }
            }
            // –ó–∞–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∫—É–±–∏–∫–æ–≤ —É –≤—Å–µ—Ö –ø–æ –Ω–∞–∂–∞—Ç–∏—é "–î–∞–ª—å—à–µ"
            manager.onRaceDiceNext = { [weak self] (_: [String: Any]) in
                guard let self = self else { return }
                DispatchQueue.main.async {
                    self.showingDiceRoll = false
                }
            }
            // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è/—Ä–∞–Ω–¥–æ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            manager.onRaceFinish = { [weak self] (payload: [String: Any]) in
                guard let self = self else { return }
                if let fins = payload["finishingParticipants"] as? [String] {
                    self.finishingParticipants = fins
                }
                if let win = payload["winnerId"] as? String { self.winnerId = win }
                // –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, UI –ø–æ–∫–∞–∂–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            }
            raceSocketManager = manager
            manager.connectIfNeeded()
        }
    }

    private func joinRaceRoomIfPossible() {
        guard let raceId = raceId, let userId = trpcService.currentUser?.id else { return }
        raceSocketManager?.joinRoom(raceId: raceId, userId: userId)
        // –ó–∞–ø—Ä–æ—Å–∏–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤ –∫–æ–º–Ω–∞—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç)
        raceSocketManager?.requestState(raceId: raceId)
    }

    private func generateRaceCells() {
        guard let race = race else { return }

        raceCells = (0..<race.road.length).map { position in
            let cellType: RaceCellData.CellType
            if let roadCell = race.road.cells?.first(where: { $0.position == position }) {
                switch roadCell.cellType {
                case .normal: cellType = .normal
                case .boost: cellType = .boost
                case .obstacle: cellType = .obstacle
                case .bonus: cellType = .bonus
                case .finish: cellType = .finish
                }
            } else {
                cellType = position == race.road.length - 1 ? .finish : .normal
            }

            // –ù–∞—Ö–æ–¥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏
            let participantsOnPosition = participants.compactMap {
                participant -> ParticipantPosition? in
                guard participant.currentPosition == position else { return nil }

                return ParticipantPosition(
                    participantId: participant.id,
                    userId: participant.userId,
                    userName: participant.user.name ?? participant.user.username ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
                    avatarUrl: participant.user.avatarUrl,
                    isCurrentUser: participant.userId == trpcService.currentUser?.id
                )
            }

            return RaceCellData(
                position: position,
                isActive: participantsOnPosition.contains { $0.isCurrentUser },
                type: cellType,
                participants: participantsOnPosition
            )
        }
    }

    private func updateGameState() {
        guard let race = race else { return }

        // –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç –¥–µ–ª–∞—Ç—å —Ö–æ–¥, –µ—Å–ª–∏ —Å–∫–∞—á–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
        // –°–µ—Ä–≤–µ—Ä —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥
        canMakeMove =
            race.status == .running && currentUserParticipant != nil
            && !(currentUserParticipant?.isFinished ?? true)
            && !raceFinished

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—á–µ—Ä–µ–¥—å –ª–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞)
        isMyTurn = canMakeMove

        print("üéÆ –õ—é–±–æ–π —É—á–∞—Å—Ç–Ω–∏–∫ –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å —Ö–æ–¥ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
    }

    func makeMove() {
        print("üé≤ makeMove() –≤—ã–∑–≤–∞–Ω–∞")
        guard canMakeMove, raceId != nil, !isAnimating else {
            print(
                "‚ùå makeMove() –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞: canMakeMove=\(canMakeMove), raceId=\(raceId != nil), isAnimating=\(isAnimating)"
            )
            return
        }

        print("‚úÖ makeMove() –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")

        // –°—Ç–∞—Ä—Ç –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞ –±—Ä–æ—Å–∫–∞
        let roundId = UUID().uuidString
        self.currentDiceRoundId = roundId
        self.diceResults = [:]
        showingDiceRoll = true
        isDiceInitiator = true

        // –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –û–î–ò–ù–°–¢–í–ï–ù–ù–´–ï –∞–≤—Ç–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        var generatedResults: [String: Int] = [:]
        for participant in participants {
            generatedResults[participant.id] = Int.random(in: 1...6)
        }
        // –§–∏–∫—Å–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –∏ —Å—Ä–∞–∑—É —Ä–∞—Å—Å—ã–ª–∞–µ–º –≤—Å–µ–º
        self.diceResults = generatedResults
        if let raceId = raceId {
            raceSocketManager?.emitDiceOpen(raceId: raceId, roundId: roundId)
            raceSocketManager?.emitDiceResults(
                raceId: raceId,
                roundId: roundId,
                diceResults: generatedResults
            )
        }
    }

    func executeMoveWithDiceResults(_ diceResults: [String: Int]) {
        guard let raceId = raceId else { return }

        // –õ–æ–∫–∞–ª—å–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–µ—Ä —à–ª—ë—Ç "–æ—Å—Ç–∞–ª—å–Ω—ã–º"
        self.diceResults = diceResults
        self.showingDiceRoll = true

        print("üé≤ executeMoveWithDiceResults() –≤—ã–∑–≤–∞–Ω–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: \(diceResults)")
        print("üé≤ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä diceResults: \(diceResults)")
        isLoading = true
        errorMessage = nil

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        let currentPositions = Dictionary(
            uniqueKeysWithValues: participants.map { ($0.id, $0.currentPosition) })

        print("üìç –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏: \(currentPositions)")

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—É–±–∏–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        let currentUserParticipantId = currentUserParticipant?.id
        let diceRoll = diceResults[currentUserParticipantId ?? ""] ?? Int.random(in: 1...6)
        self.diceRoll = diceRoll
        print(
            "üé≤ –ë—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (participantId: \(currentUserParticipantId ?? "nil")): \(diceRoll)"
        )

        let request: [String: Any] = [
            "raceId": raceId,
            "diceRoll": diceRoll,
            "diceResults": diceResults,  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫—É–±–∏–∫–æ–≤
        ]

        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–∂–µ –±—ã–ª–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–æ–º

        Task {
            do {
                print("üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
                let response: MakeMoveResponse = try await trpcService.executePOST(
                    endpoint: "race.makeMove",
                    body: request
                )
                print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ–ª—É—á–µ–Ω")

                await MainActor.run {
                    print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ö–æ–¥–∞...")

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å –ª–∏ –≥–æ–Ω–∫–∞
                    if response.raceFinished {
                        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏, –Ω–æ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Å—Ä–∞–∑—É
                        self.finishingParticipants = response.finishingParticipants ?? []
                        self.winnerId = response.winnerId
                        print("üèÅ –ì–æ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: \(self.winnerId ?? "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")")
                        print("üèÅ –§–∏–Ω–∏—à–∏—Ä–æ–≤–∞–≤—à–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: \(self.finishingParticipants)")

                        // –°–æ–æ–±—â–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏ –∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ
                        self.raceSocketManager?.emitFinish(
                            raceId: raceId,
                            finishingParticipants: self.finishingParticipants,
                            winnerId: self.winnerId
                        )
                    }

                    // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ö–æ–¥–∞
                    self.refreshRaceAndStartAnimation(withPreviousPositions: currentPositions)
                    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ö–æ–¥–∞ ‚Äî —É–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–µ—Ä–µ–∑ —Å–æ–∫–µ—Ç, —á—Ç–æ–±—ã –æ–Ω–∏ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
                    self.raceSocketManager?.emitRaceUpdate(
                        raceId: raceId,
                        payload: [
                            "raceId": raceId,
                            "updatedAt": Int(Date().timeIntervalSince1970),
                        ]
                    )
                    self.isLoading = false
                }
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ö–æ–¥–∞: \(error)")
                await MainActor.run {
                    self.errorMessage = "–û—à–∏–±–∫–∞ —Ö–æ–¥–∞: \(error.localizedDescription)"
                    self.isLoading = false
                }
            }
        }
    }

    func diceNext() {
        if let raceId = race?.id {
            raceSocketManager?.emitDiceNext(raceId: raceId)
        }
        showingDiceRoll = false
    }

    func setWinner(participantId: String) {
        guard let raceId = race?.id else { return }
        isLoading = true
        Task {
            do {
                let _: SuccessResponse = try await trpcService.executePOST(
                    endpoint: "race.setWinner",
                    body: [
                        "raceId": raceId,
                        "winnerParticipantId": participantId,
                    ]
                )

                await MainActor.run {
                    self.winnerId = participantId
                    self.showingWinnerSelection = false
                    self.raceFinished = true
                    self.isLoading = false
                    self.refreshRace()
                }
            } catch {
                await MainActor.run {
                    self.errorMessage = "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: \(error.localizedDescription)"
                    self.isLoading = false
                }
            }
        }
    }

    private func startAnimation(withPreviousPositions previousPositions: [String: Int]) {
        print("üöÄ startAnimation() –≤—ã–∑–≤–∞–Ω–∞")
        isAnimating = true

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
        self.previousPositions = previousPositions

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —à–∞–≥–∏ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        prepareAnimationSteps()

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        print("üé¨ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        animateAllParticipantsSimultaneously()
    }

    private func prepareAnimationSteps() {
        participantAnimationSteps.removeAll()
        currentStepPosition.removeAll()
        isJumping.removeAll()
        animationStepProgress.removeAll()

        for participant in participants {
            guard let previousPos = previousPositions[participant.id] else { continue }
            let currentPos = participant.currentPosition
            let distance = currentPos - previousPos

            if distance > 0 {
                // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ —à–∞–≥–æ–≤ –í–ö–õ–Æ–ß–ê–Ø –Ω–∞—á–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
                var steps: [Int] = []
                // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏ –∏ –∏–¥–µ–º –¥–æ —Ç–µ–∫—É—â–µ–π
                for step in 0...distance {
                    steps.append(previousPos + step)
                }
                participantAnimationSteps[participant.id] = steps
                currentStepPosition[participant.id] = Double(previousPos)  // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
                isJumping[participant.id] = false
                animationStepProgress[participant.id] = 0.0

                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                print(
                    "üöÄ –£—á–∞—Å—Ç–Ω–∏–∫ \(participant.id): –±—ã–ª–æ \(previousPos), —Å—Ç–∞–ª–æ \(currentPos), —à–∞–≥–∏: \(steps)"
                )
            }
        }
    }

    private func animateAllParticipantsSimultaneously() {
        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        let maxSteps = participantAnimationSteps.values.map { $0.count }.max() ?? 0

        print("üé¨ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤: \(maxSteps)")

        // –ê–Ω–∏–º–∏—Ä—É–µ–º –≤—Å–µ —à–∞–≥–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        animateStep(stepIndex: 0, maxSteps: maxSteps)
    }

    private func animateStep(stepIndex: Int, maxSteps: Int) {
        guard stepIndex < maxSteps else {
            print("‚úÖ –í—Å–µ —à–∞–≥–∏ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º")
            finishAnimation()
            return
        }

        print("üéØ –ê–Ω–∏–º–∏—Ä—É–µ–º —à–∞–≥ \(stepIndex + 1)/\(maxSteps)")

        // –ê–Ω–∏–º–∏—Ä—É–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ
        for participant in participants {
            guard let steps = participantAnimationSteps[participant.id],
                stepIndex < steps.count
            else { continue }

            let targetPosition = steps[stepIndex]

            print("üéØ –£—á–∞—Å—Ç–Ω–∏–∫ \(participant.id): —à–∞–≥ \(stepIndex), –ø–æ–∑–∏—Ü–∏—è \(targetPosition)")

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä—ã–∂–∫–∞
            isJumping[participant.id] = true

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—Ä–∞–∑—É –Ω–∞ —Ü–µ–ª—É—é –∫–ª–µ—Ç–∫—É
            currentStepPosition[participant.id] = Double(targetPosition)
            animationStepProgress[participant.id] = 1.0
        }

        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        let impactFeedback = UIImpactFeedbackGenerator(style: .medium)
        impactFeedback.impactOccurred()

        // –ü–∞—É–∑–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.4) {
            // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä—ã–∂–∫–∏ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            for participant in self.participants {
                self.isJumping[participant.id] = false
            }

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                self.animateStep(stepIndex: stepIndex + 1, maxSteps: maxSteps)
            }
        }
    }

    private func finishAnimation() {
        // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø–∞—É–∑–∞
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) {
            withAnimation(.easeOut(duration: 0.2)) {
                self.isAnimating = false
            }

            DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                // –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏, –Ω–æ –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                self.animationProgress = 0.0
                self.currentAnimationStep = 0
                self.totalAnimationSteps = 0
                self.previousPositions.removeAll()
                self.participantAnimationSteps.removeAll()

                // –ù–ï –æ—á–∏—â–∞–µ–º currentStepPosition, isJumping –∏ animationStepProgress
                // —á—Ç–æ–±—ã –∞–≤–∞—Ç–∞—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Å—Ç–∞–ª–∏—Å—å –≤–∏–¥–∏–º—ã–º–∏ –Ω–∞ –∏—Ö —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
                // –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                for participant in self.participants {
                    self.currentStepPosition[participant.id] = Double(participant.currentPosition)
                    self.isJumping[participant.id] = false
                    self.animationStepProgress[participant.id] = 1.0
                }

                // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ü–û–°–õ–ï –∞–Ω–∏–º–∞—Ü–∏–∏
                self.suppressWinnerPresentation = false
                self.checkAndShowWinnerAfterAnimation()
            }
        }
    }

    private func checkAndShowWinnerAfterAnimation() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –≥–æ–Ω–∫–∏
        guard !finishingParticipants.isEmpty, winnerId != nil else {
            print("üèÅ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –≥–æ–Ω–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            return
        }

        print("üèÅ –ê–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–Ω–∫–∏
        self.raceFinished = true

        // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        if self.finishingParticipants.count > 1 {
            print("üèÅ –ù–µ—Å–∫–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
            self.showingWinnerSelection = true
        } else {
            print("üèÅ –û–¥–∏–Ω —É—á–∞—Å—Ç–Ω–∏–∫ —Ñ–∏–Ω–∏—à–∏—Ä–æ–≤–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—è")
            // –≠–∫—Ä–∞–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —É–∂–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —á–µ—Ä–µ–∑ raceFinished = true
        }
    }

    func refreshRace() {
        guard let raceId = raceId else { return }

        Task {
            do {
                let response: Race = try await trpcService.executeGET(
                    endpoint: "race.getRaceById",
                    input: ["id": raceId, "includeParticipants": true]
                )

                await MainActor.run {
                    self.loadRace(response)
                }
            } catch {
                await MainActor.run {
                    self.errorMessage = "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: \(error.localizedDescription)"
                }
            }
        }
    }

    func refreshRaceAndStartAnimation(withPreviousPositions previousPositions: [String: Int]) {
        guard let raceId = raceId else { return }

        Task {
            do {
                let response: Race = try await trpcService.executeGET(
                    endpoint: "race.getRaceById",
                    input: ["id": raceId, "includeParticipants": true]
                )

                await MainActor.run {
                    // –ü–æ–¥–∞–≤–ª—è–µ–º –ø–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
                    self.suppressWinnerPresentation = true
                    self.loadRace(response)

                    print("üé¨ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è...")
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–≤–∏–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
                    self.startAnimation(withPreviousPositions: previousPositions)
                }
            } catch {
                await MainActor.run {
                    self.errorMessage = "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: \(error.localizedDescription)"
                }
            }
        }
    }
}
