import Foundation
import SwiftUI

@MainActor
class SettingsViewModel: ObservableObject {
    @Published var themeSettings = ThemeSettings()

    private let userDefaults = UserDefaults.standard
    private let themeKey = "app_theme"

    init() {
        loadThemeSettings()
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        applyTheme(themeSettings.currentTheme)
        print(
            "üé® SettingsViewModel: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å —Ç–µ–º–æ–π: \(themeSettings.currentTheme.rawValue)")
    }

    func setTheme(_ theme: AppTheme) {
        themeSettings.currentTheme = theme
        saveThemeSettings()
        applyTheme(theme)
    }

    func applySavedTheme() {
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UserDefaults –ø–µ—Ä–µ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º
        loadThemeSettings()
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Ç–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
        applyTheme(themeSettings.currentTheme)
    }

    private func loadThemeSettings() {
        if let savedTheme = userDefaults.string(forKey: themeKey),
            let theme = AppTheme(rawValue: savedTheme)
        {
            themeSettings.currentTheme = theme
        } else {
            // –ï—Å–ª–∏ —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            themeSettings.currentTheme = .system
        }
    }

    private func saveThemeSettings() {
        userDefaults.set(themeSettings.currentTheme.rawValue, forKey: themeKey)
        userDefaults.synchronize()  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    }

    private func applyTheme(_ theme: AppTheme) {
        switch theme {
        case .light:
            setColorScheme(.light)
        case .dark:
            setColorScheme(.dark)
        case .system:
            setColorScheme(nil)
        }

        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
        DispatchQueue.main.async {
            self.objectWillChange.send()
            print("üé® SettingsViewModel: UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è —Ç–µ–º—ã: \(theme.rawValue)")
        }
    }

    private func setColorScheme(_ colorScheme: ColorScheme?) {
        let colorSchemeString =
            colorScheme == nil ? "system" : (colorScheme == .dark ? "dark" : "light")
        print("üé® SettingsViewModel: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ ColorScheme: \(colorSchemeString)")

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        if let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene {
            windowScene.windows.forEach { window in
                let newStyle = colorScheme?.userInterfaceStyle ?? .unspecified
                if window.overrideUserInterfaceStyle != newStyle {
                    window.overrideUserInterfaceStyle = newStyle
                }
            }
        }

        // –î–ª—è macOS —Ç–∞–∫–∂–µ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        #if os(macOS)
            if let colorScheme = colorScheme {
                let newAppearance =
                    colorScheme == .dark
                    ? NSAppearance(named: .darkAqua)
                    : NSAppearance(named: .aqua)

                if NSApp.appearance != newAppearance {
                    NSApp.appearance = newAppearance
                }
            } else {
                if NSApp.appearance != nil {
                    NSApp.appearance = nil
                }
            }
        #endif
    }
}

extension ColorScheme {
    var userInterfaceStyle: UIUserInterfaceStyle {
        switch self {
        case .light:
            return .light
        case .dark:
            return .dark
        @unknown default:
            return .unspecified
        }
    }
}
