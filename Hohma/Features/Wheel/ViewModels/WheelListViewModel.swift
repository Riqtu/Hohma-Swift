//
//  WheelListViewModel.swift
//  Hohma
//
//  Created by Artem Vydro on 06.08.2025.
//

import Foundation
import SwiftUI

@MainActor
class WheelListViewModel: ObservableObject {
    @Published var wheels: [WheelWithRelations] = []
    @Published var isLoading = false
    @Published var isRefreshing = false
    @Published var error: String?
    let apiURL = Bundle.main.object(forInfoDictionaryKey: "API_URL") as? String

    let user: AuthResult?

    init(user: AuthResult?) {
        self.user = user
    }

    func loadWheels() async {
        isLoading = true
        defer { isLoading = false }

        do {
            let newWheels = try await fetchWheels()
            self.wheels = newWheels

        } catch is CancellationError {
            #if DEBUG
                print("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
            #endif
        } catch URLError.userAuthenticationRequired {
            // 401 –æ—à–∏–±–∫–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            // —á–µ—Ä–µ–∑ NetworkManager
            #if DEBUG
                print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            #endif
        } catch {
            self.error = error.localizedDescription
            #if DEBUG
                print(error)
            #endif
        }
    }

    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø—É—Å—Ç–æ–π
    func forceLoadWheels() async {
        await loadWheels()
    }

    func refreshWheels() async {
        isRefreshing = true
        defer { isRefreshing = false }

        do {
            let newWheels = try await fetchWheels()

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –∑–∞–º–µ–Ω—ã
            updateWheelsList(with: newWheels)

        } catch is CancellationError {
            #if DEBUG
                print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            #endif
        } catch URLError.userAuthenticationRequired {
            // 401 –æ—à–∏–±–∫–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            // —á–µ—Ä–µ–∑ NetworkManager
            #if DEBUG
                print("–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
            #endif
        } catch {
            self.error = error.localizedDescription
            #if DEBUG
                print(error)
            #endif
        }
    }

    // MARK: - Private Methods

    private func updateWheelsList(with newWheels: [WheelWithRelations]) {
        // –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –Ω–æ–≤—ã—Ö –∫–æ–ª–µ—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        let newWheelsDict = Dictionary(uniqueKeysWithValues: newWheels.map { ($0.id, $0) })

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–µ—Å–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        var updatedWheels = wheels

        for (index, existingWheel) in wheels.enumerated() {
            if let updatedWheel = newWheelsDict[existingWheel.id] {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∫–æ–ª–µ—Å–æ
                updatedWheels[index] = updatedWheel
            }
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –±—ã–ª–æ –≤ —Å–ø–∏—Å–∫–µ
        for newWheel in newWheels {
            if !wheels.contains(where: { $0.id == newWheel.id }) {
                updatedWheels.append(newWheel)
            }
        }

        // –£–¥–∞–ª—è–µ–º –∫–æ–ª–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        updatedWheels = updatedWheels.filter { existingWheel in
            newWheels.contains { $0.id == existingWheel.id }
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        updatedWheels.sort { $0.createdAt > $1.createdAt }

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º UI —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–µ—Å: \(updatedWheels.count) —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        withAnimation(.easeInOut(duration: 0.3)) {
            self.wheels = updatedWheels
        }
    }

    // MARK: - Public Methods

    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∫–æ–ª–µ—Å–æ –≤ —Å–ø–∏—Å–∫–µ
    func updateWheel(_ updatedWheel: WheelWithRelations) {
        if let index = wheels.firstIndex(where: { $0.id == updatedWheel.id }) {
            wheels[index] = updatedWheel
        }
    }

    /// –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∫–æ–ª–µ—Å–æ –≤ —Å–ø–∏—Å–æ–∫
    func addWheel(_ newWheel: WheelWithRelations) {
        if !wheels.contains(where: { $0.id == newWheel.id }) {
            wheels.append(newWheel)
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
            wheels.sort { $0.createdAt > $1.createdAt }
        }
    }

    /// –£–¥–∞–ª—è–µ—Ç –∫–æ–ª–µ—Å–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    func removeWheel(withId id: String) {
        wheels.removeAll { $0.id == id }
    }

    private func fetchWheels() async throws -> [WheelWithRelations] {
        guard let apiURL = apiURL else {
            throw NSError(
                domain: "NetworkError", code: 1,
                userInfo: [NSLocalizedDescriptionKey: "API URL –Ω–µ –∑–∞–¥–∞–Ω"])
        }

        guard let url = URL(string: "\(apiURL)/wheelList.getAll") else {
            throw NSError(
                domain: "NetworkError", code: 2,
                userInfo: [NSLocalizedDescriptionKey: "URL –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π"])
        }

        var request = URLRequest(url: url)
        request.httpMethod = "GET"

        // –ü–µ—Ä–µ–¥–∞—ë–º —Ç–æ–∫–µ–Ω
        if let user = user {
            request.setValue("Bearer \(user.token)", forHTTPHeaderField: "Authorization")
        }

        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .iso8601withMilliseconds

        #if DEBUG
            // –í DEBUG —Ä–µ–∂–∏–º–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            let (data, _) = try await URLSession.shared.data(for: request)
            if let rawString = String(data: data, encoding: .utf8) {
                print("Raw server response:", rawString)
            }
            // –ó–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º NetworkManager –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
            let response: WheelListResponse = try await NetworkManager.shared.request(
                request, decoder: decoder)
        #else
            let response: WheelListResponse = try await NetworkManager.shared.request(
                request, decoder: decoder)
        #endif

        return response.result.data.json
    }
}
